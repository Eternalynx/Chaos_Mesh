#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Fri Jun 14 16:49:22 2024
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn $env(SHELL)
match_max 100000
expect -exact "\]0;rodzon@localhost:~/chatWithMe/k8s\[?2004h\[rodzon@localhost k8s\]\$ "
send -- "\[A"
expect -exact "exit"
send -- "\[B"
expect -exact "\[K"
send -- "\[A"
expect -exact "exit"
send -- "\[A"
expect -exact "\[2Pls"
send -- "\[A"
expect -exact "dwa"
send -- "\[B"
expect -exact "\[1Pls"
send -- "\[B"
expect -exact "exit"
send -- "\[B"
expect -exact "\[K"
send -- "\[B"
expect -exact ""
send -- "\[B"
expect -exact ""
send -- "\[A"
expect -exact "exit"
send -- "\[A"
expect -exact "\[2Pls"
send -- "\[A"
expect -exact "dwa"
send -- "\[A"
expect -exact "dwdadlkk"
send -- "\[B"
expect -exact "wa\[K"
send -- "\[B"
expect -exact "\[1Pls"
send -- "\[B"
expect -exact "exit"
send -- "\[B"
expect -exact "\[K"
send -- "\[B"
expect -exact ""
send -- "\[B"
expect -exact ""
send -- "\[A"
expect -exact "exit"
send -- "\[A"
expect -exact "\[2Pls"
send -- "\[A"
expect -exact "dwa"
send -- "\[A"
expect -exact "dwdadlkk"
send -- "\[A"
expect -exact "./startEverything.sh "
send -- "\[B"
expect -exact "\[12Pddwdadlkk"
send -- "\[B"
expect -exact "wa\[K"
send -- "\[B"
expect -exact "\[1Pls"
send -- "\[B"
expect -exact "exit"
send -- "\[B"
expect -exact "\[K"
send -- "\[B"
expect -exact ""
send -- "\[B"
expect -exact ""
send -- "ls\r"
expect -exact "ls\r
\[?2004l\r\[0m\[01;34mchat\[0m  expectCreateTunnel.exp  \[01;34mpostgres\[0m  \[01;32mresetMinikube.sh\[0m  \[01;32mscript.exp\[0m  \[01;32mstartChatWithMe.sh\[0m  \[01;32mstartEverything.sh\[0m  \[01;34mtraefik\[0m\r
\]0;rodzon@localhost:~/chatWithMe/k8s\[?2004h\[rodzon@localhost k8s\]\$ "
send -- "\[A"
expect -exact "ls"
send -- "\[A"
expect -exact "exit"
send -- "\[A"
expect -exact "\[2Pls"
send -- "\[A"
expect -exact "dwa"
send -- "\[B"
expect -exact "\[1Pls"
send -- "\[B"
expect -exact "exit"
send -- "\[B"
expect -exact "\[2Pls"
send -- "\[B"
expect -exact "\[K"
send -- "\[B"
expect -exact ""
send -- "\[B"
expect -exact ""
send -- "kube	"
expect -exact "ctl "
send -- ""
expect -exact "\[K"
send -- ""
expect -exact "\[K"
send -- ""
expect -exact "\[K"
send -- ""
expect -exact "\[K"
send -- ""
expect -exact "\[K"
send -- ""
expect -exact "\[K"
send -- ""
expect -exact "\[K"
send -- ""
expect -exact "\[K"
send -- ""
expect -exact ""
send -- ""
expect -exact ""
send -- ""
expect -exact ""
send -- ""
expect -exact ""
send -- ""
expect -exact ""
send -- ""
expect -exact ""
send -- "exit\r"
expect eof
